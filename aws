#!/bin/bash

IMAGE=yamaszone/aws

# If image version is not specified in the $AWS_IMAGE_CONF_FILE file, use 'latest'
AWS_IMAGE_TAG=latest
AWS_IMAGE_CONF_FILE=/etc/environment
cat "$AWS_IMAGE_CONF_FILE" | grep AWS_IMAGE > /dev/null 2>&1
if [[ "$?" == 1 ]];then
	sudo /bin/bash -c "echo AWS_IMAGE=${IMAGE}:${AWS_IMAGE_TAG} >> ${AWS_IMAGE_CONF_FILE}"
fi

get_help(){
	echo "Usage:"
	printf "\t build\t: Build image with the specified awscli version (default=latest).\n"
	printf "\t config\t: Provide awscli container version (e.g. aws config 1.11.76) to override default 'latest'.\n"
	printf "\t help\t: Show help from awscli container.\n"
	printf "\t --help\t: Show this help.\n"
	printf "\t * \t: Run awscli container if no input passed to 'aws'.\n"
	exit 0
}

# param $1 - awscli version
build_image(){
	IMAGE_VERSION=$1
	IMAGE_TAG=$1
	# Use awscli version to tag the awscli container
	# Defaults to 'latest' if not specified
	if [[ -z "$IMAGE_VERSION" ]]; then
		IMAGE_TAG=latest
		IMAGE_VERSION=
	else
		IMAGE_TAG="$IMAGE_VERSION"
		IMAGE_VERSION="==${IMAGE_VERSION}"
	fi
	docker build --no-cache -t "$IMAGE":"$IMAGE_TAG" --build-arg AWSCLI_VERSION="$IMAGE_VERSION" .
}

# param $1 - awscli tag
configure_container_version(){
	AWS_IMAGE_GIVEN_TAG=$1
	if [[ -z "$AWS_IMAGE_GIVEN_TAG" ]];then
		printf "ERROR: Provide a target awscli version (e.g. 1.11.138, latest, etc.) to override the default 'latest' version.\n"
		exit 1
	else
		CUR_TAG=$(cat "$AWS_IMAGE_CONF_FILE" | grep AWS_IMAGE | cut -d ":" -f2)
		sudo sed -i -e "s/${CUR_TAG}/${AWS_IMAGE_GIVEN_TAG}/g" "$AWS_IMAGE_CONF_FILE"
	fi
	AWS_IMAGE=$(cat "$AWS_IMAGE_CONF_FILE" | grep AWS_IMAGE | cut -d "=" -f2)
	printf "Currently configured awscli tag is: ${AWS_IMAGE}.\n"
}

USER_INPUT_PARAM_1=$1
case "$USER_INPUT_PARAM_1" in
    build)
		USER_INPUT_PARAM_2=$2
		build_image "$USER_INPUT_PARAM_2"
		;;
    config)
		USER_INPUT_PARAM_2=$2
		configure_container_version "$USER_INPUT_PARAM_2"
		;;
    --help)
		get_help
		;;
    *)
		AWS_IMAGE=$(cat "$AWS_IMAGE_CONF_FILE" | grep AWS_IMAGE | cut -d "=" -f2)
		sudo docker run --rm \
			-v "$PWD":"$PWD" \
			-v ~/.ssh:/root/.ssh \
			-v ~/.aws:/root/.aws \
			--workdir="$PWD" \
			"$AWS_IMAGE" \
			aws "${@:1}"
		;;
esac
